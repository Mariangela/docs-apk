{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{522:function(e,a,t){\"use strict\";t.r(a);var n=t(1),s=Object(n.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"create-an-api-from-a-service\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#create-an-api-from-a-service\"}},[e._v(\"#\")]),e._v(\" Create an API From a Service\")]),e._v(\" \"),t(\"h2\",{attrs:{id:\"create-an-api\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#create-an-api\"}},[e._v(\"#\")]),e._v(\" Create an API\")]),e._v(\" \"),t(\"p\",[e._v(\"You can create an API using one of the following flows:\")]),e._v(\" \"),t(\"details\",{staticClass:\"custom-block details\"},[t(\"summary\",[e._v(\"UI Flow\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",[t(\"code\",[e._v(\"### Create an API using the UI flow\\n\\nFollow the instructions below to create a REST API using the basic flow:\\n\\n1. Sign in to the WSO2 API Publisher.\\n\\n    ```\\n    https://<hostname>:9443/publisher\\n    ``` \\n\\n    Example: \\n    \\n    ```\\n    https://localhost:9443/publisher\\n    ```\\n\\n    ::: info\\n    The **Create API** button will only appear for a user who has the `creator` role permission.\\n    :::\\n\\n2. Select **REST API** from the options available.\\n\\n3.  Click **Start from Scratch**.\\n\\n4.  Enter API details. \\n\")])])])]),e._v(\" \"),t(\"details\",{staticClass:\"custom-block details\"},[t(\"summary\",[e._v(\"CRD Flow\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",[t(\"code\",[e._v(\"### Create an API using a CRD\\n\\nWhen you create a new CustomResourceDefinition (CRD), the Kubernetes API Server creates a new RESTful resource path for each version you specify. The custom resource created from a CRD object can be either namespaced or cluster-scoped, as specified in the CRD's spec.scope field. As with existing built-in objects, deleting a namespace deletes all custom objects in that namespace. CustomResourceDefinitions themselves are non-namespaced and are available to all namespaces.\\n\\nFor example, if you save the following CustomResourceDefinition to resourcedefinition.yaml:\\n\")])])])]),e._v(\" \"),t(\"h2\",{attrs:{id:\"attach-an-interface-to-the-api\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#attach-an-interface-to-the-api\"}},[e._v(\"#\")]),e._v(\" Attach an interface to the API\")])])}),[],!1,null,null,null);a.default=s.exports}}]);","extractedComments":[]}